{"version":3,"sources":["thump/react.cljc"],"mappings":"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","names":["thump.react/keyword->str","k","kw-ns","cljs.core/namespace","kw-name","cljs.core/name","thump.react/camel-case*","s","cljs.core/Keyword","cljs.core/Symbol","vec__45343","seq__45344","cljs.core/seq","first__45345","cljs.core/first","cljs.core/next","first-word","words","clojure.string.split","cljs.core/empty?","cljs.core._EQ_","cljs.core.map","clojure.string/capitalize","cljs.core.conj","clojure.string.join","p__45346","vec__45347","cljs.core.nth","thump.react/map-entry->obj-entry","v","G__45350","cljs.core.clj__GT_js","cljs.core.remove","cljs.core/nil?","thump.react/merge-obj+map","obj","m","seq__45351","chunk__45352","count__45353","i__45354","vec__45361","temp__5804__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__45364","thump.react.goog$module$goog$object.containsKey","thump.react.goog$module$goog$object.set","thump.react/props->obj","cljs.core/contains?","cljs.core.apply","thump.react.goog$module$goog$object.create","cljs.core.mapcat","cljs.core.dissoc","cljs.core.get","thump.react/create-element","js/module$node_modules$react$index.createElement","thump.react/Fragment","js/module$node_modules$react$index.Fragment","thump.react/custom-els","thump.react/hiccup-element","el","props","children","thump.react/interpret","vec","*hiccup-element*-orig-val__45367","*hiccup-element*-temp-val__45368","thump.core/*hiccup-element*","thump.core/interpret"],"sourcesContent":["(ns thump.react\n  (:require [clojure.string :as str]\n            #?@(:cljs [[\"react\" :as react]\n                       [goog.object :as gobj]])\n            [thump.core])\n  #?(:cljs (:require-macros [thump.react]\n                            [thump.core])))\n\n(defn keyword->str [k]\n  (let [kw-ns (namespace k)\n        kw-name (name k)]\n    (if (nil? kw-ns)\n      kw-name\n\n      (str kw-ns \"/\" kw-name))))\n\n(defn- camel-case*\n  \"Returns camel case version of the string, e.g. \\\"http-equiv\\\" becomes \\\"httpEquiv\\\".\"\n  [s]\n  (if (or (keyword? s)\n          (string? s)\n          (symbol? s))\n    (let [[first-word & words] (str/split (name s) #\"-\")]\n      (if (or (empty? words)\n              (= \"aria\" first-word)\n              (= \"data\" first-word))\n        (name s)\n        (-> (map str/capitalize words)\n            (conj first-word)\n            str/join)))\n    s))\n\n(defn map-entry->obj-entry [[k v]]\n  (case k\n    :style [\"style\" #?(:clj `(~'clj->js ~v :keyword-fn camel-case*)\n                       :cljs (clj->js v :keyword-fn camel-case*))]\n    :class [\"className\" #?(:clj `(if (string? ~v) ~v\n                                     (->> ~v (remove nil?) (str/join \" \")))\n                           :cljs (if (string? v)\n                                   v\n                                   (->> v (remove nil?) (str/join \" \"))))]\n    :for [\"htmlFor\" v]\n    [(-> k (keyword->str) (camel-case*)) v]))\n\n#?(:cljs (defn merge-obj+map [obj m]\n           (doseq [[k v] (map map-entry->obj-entry m)]\n             (if (gobj/containsKey obj k)\n               ;; do nothing if object already contains key\n               nil\n               (gobj/set obj k v)))\n           obj))\n\n(defn props->obj [m]\n  (if (contains? m '&)\n    #?(:clj `(merge-obj+map (~'js-obj ~@(mapcat map-entry->obj-entry (dissoc m '&)))\n                            ~(get m '&))\n       :cljs (merge-obj+map (apply gobj/create (mapcat map-entry->obj-entry (dissoc m '&)))\n                            (get m '&)))\n    #?(:clj `(~'js-obj ~@(mapcat map-entry->obj-entry m))\n       :cljs (apply gobj/create (mapcat map-entry->obj-entry m)))))\n\n(def create-element\n  #?(:clj (fn [& xs] xs)\n     :cljs react/createElement))\n\n#?(:cljs (def Fragment react/Fragment))\n\n(def custom-els\n  {\"<>\" #?(:clj `Fragment\n           :cljs react/Fragment)})\n\n(defmacro hiccup-element [el props children]\n  `(create-element ~(get custom-els el el) ~(props->obj props) ~@children))\n\n#?(:cljs (defn hiccup-element [el props children]\n           (apply react/createElement\n                  (get custom-els el el)\n                  (props->obj props)\n                  children)))\n\n#?(:cljs (defn interpret [vec]\n           (binding [thump.core/*hiccup-element* hiccup-element]\n             (thump.core/interpret vec))))\n"]}